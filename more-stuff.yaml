parameters:
  domainName:
    description: 'The domain name'
    default: 'test001.us'
  indexDocumentSuffix:
    description: 'A suffix that is appended to a request that is for a directory on the website endpoint.'
    default: 'index.html'
  errorDocumentKey:
    description: 'The object key name to use when a 4XX class error occurs.'
    default: 'error.html'
  loggingTargetPrefix:
    description: 'A prefix for all log object keys.'
    default: 'logs/'
  awsRegion:
    description: 'The aws region to work in.'
    default: 'us-east-1'

steps:
- name: "Create Root Bucket"
  image: relaysh/aws-s3-step-bucket-create
  spec:
    aws: &aws
      connection: !Connection { type: aws, name: my-aws-account } 
      region: !Parameter awsRegion
    name: !Parameter domainName

- name: "Create Subdomain Bucket"
  image: relaysh/aws-s3-step-bucket-create
  spec:
    aws: *aws
    name: !Fn.concat ["www.", !Parameter domainName]

- name: "Create Logging Bucket"
  image: relaysh/aws-s3-step-bucket-create
  spec:
    aws: *aws
    name: !Fn.concat ["logs.", !Parameter domainName]

- name: "Set Root Bucket as Website"
  image: bryanjbelanger/aws-s3-step-put-bucket-website 
  spec:
    aws: *aws
    bucketName: !Parameter domainName
    redirectAllRequestsToHostName: ''
  dependsOn:
    - "Create Root Bucket"

- name: "Set Subdomain Bucket as Redirect to Root"
  image: bryanjbelanger/aws-s3-step-put-bucket-website
  spec:
    aws: *aws
    bucketName: !Fn.concat ["www.", !Parameter domainName]
    redirectAllRequestsToHostName: !Parameter domainName
  dependsOn:
    - "Create Subdomain Bucket"

- name: "Remove public block from root bucket"
  image: bryanjbelanger/aws-s3-step-delete-public-access-block
  spec:
    aws: *aws
    bucketName: !Parameter domainName
  dependsOn:
    - "Create Root Bucket"

- name: "Set log delivery ACL on logging bucket"
  image: bryanjbelanger/aws-s3-step-put-bucket-acl
  spec:
    aws: *aws
    bucketName: !Fn.concat ["logs.", !Parameter domainName]
    acl: ''
    grantFullControl: ''
    grantRead: ''
    grantReadACP: ''
    grantWrite: ''
    grantWriteACP: ''
    accessControlPolicyGrants:
      - Grantee:
          Type: "Group"
          URI: "http://acs.amazonaws.com/groups/s3/LogDelivery"
        Permission: "WRITE"
      - Grantee:
          Type: "Group"
          URI: "http://acs.amazonaws.com/groups/s3/LogDelivery"
        Permission: "READ_ACP"
    accessControlPolicyOwner: ''
  dependsOn:
    - "Create Logging Bucket"

- name: "Set Log Bucket as Target for Root Bucket"
  image: bryanjbelanger/aws-s3-step-put-bucket-logging
  spec:
    aws: *aws
    bucketName: !Parameter domainName
    targetBucket: !Fn.concat ["logs.", !Parameter domainName]
    targetPrefix: !Parameter loggingTargetPrefix
  dependsOn:
    - "Create Root Bucket"
    - "Set log delivery ACL on logging bucket"

- name: "Upload index.html"
  image: bryanjbelanger/aws-s3-step-put-upload-content
  spec:
    aws: *aws
    bucket: !Parameter domainName
    key: 'index.html'
    sourceContent: |
      <html xmlns="http://www.w3.org/1999/xhtml" >
      <head>
          <title>My Website Home Page</title>
      </head>
      <body>
        <h1>Welcome to my website</h1>
        <p>Now hosted on Amazon S3!</p>
      </body>
      </html>
  dependsOn:
    - "Create Root Bucket"

- name: "Get Hosted Zone ID"
  image: bryanjbelanger/aws-route53-get-hostedzoneid
  spec:
    aws: *aws
    dnsName: !Parameter domainName

- name: "Create A Record Sets"
  image: bryanjbelanger/aws-route53-change-resource-record-set
  spec:
    aws: *aws
    hostedZoneId: !Output ["Get Hosted Zone ID", hostedZoneId]
    changeBatch:
      Comment: "Setup A records"
      Changes:
        - Action: "UPSERT"
          ResourceRecordSet:
            Name: !Parameter domainName
            Type: "A"
            AliasTarget:
              HostedZoneId: "Z3AQBSTGFYJSTF" # !Output [aws-route53-get-hostedzoneid, hostedZoneId]
              DNSName: !Fn.concat ["s3-website-", !Parameter awsRegion, ".amazonaws.com."]
              EvaluateTargetHealth: false
        - Action: "UPSERT"
          ResourceRecordSet:
            Name: !Fn.concat ["www.", !Parameter domainName]
            Type: "A"
            AliasTarget:
              HostedZoneId: "Z3AQBSTGFYJSTF" # !Output [aws-route53-get-hostedzoneid, hostedZoneId]
              DNSName: !Fn.concat ["s3-website-", !Parameter awsRegion, ".amazonaws.com."]
              EvaluateTargetHealth: false
  dependsOn:
    - "Set Root Bucket as Website"
    - "Set Subdomain Bucket as Redirect to Root"

- name: "Set Root Bucket Policy"
  image: bryanjbelanger/aws-s3-step-put-bucket-policy
  spec:
    aws: *aws
    bucketName: !Parameter domainName
    policy:
      Version: "2012-10-17"
      Statement:
        Sid: "PublicReadGetObject"
        Effect: "Allow"
        Principal: "*"
        Action:
          - "s3:GetObject"
        Resource:
          - !Fn.concat ["arn:aws:s3:::", !Parameter domainName, "/*"]
  dependsOn:
    - "Create Root Bucket"